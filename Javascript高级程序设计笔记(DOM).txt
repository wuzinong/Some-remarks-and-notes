笔记原地址：
http://www.w3cfuns.com/notes/13600/1d28b152797f8a1873e0b1a67439e044.html
现同步至github

  一.Node类型
  1.DOM1级绑定了一个Node接口，该接口将由DOM中的所有节点类型实现，因此所有节点类型都共享着相同的基本属性和方法。
       每个节点都有一个nodeType属性，用于表明节点的类型。节点类型由在Node类型中定义的下列12个数值常量表示，任何节点类型必居其一
HTML 代码



1234567
Node.ELEMENT_NODE:1
Node.ATTRIBUTE_NODE:2
Node.TEXT_NODE:3
Node.CDATA_SECTION_NODE:4
Node.ENTITY_REFERENCE_NODE:5
Node.ENTITY_NODE:6
Node.PROCESSING_INSTRUCTION_NODE:7

        2.节点关系：每个节点都有一个childNode属性，其中保存着一个NodeList对象,NodeList是一个类数组对象(但不是Array的实例)，用于保存一组有序的节点。
           是基于DOM结构动态执行查询的结果，因此DOM结构的变化能够自动反应在NodeList对象中
HTML 代码



1234567891011121314151617181920212223242526272829303132
//访问保存在NodeList中的节点，可以通过[]也可以通过item()
var firstChild = someNode.childNodes[0];
var secondChild = someNode.childNodes.item(1);
var count = someNode.childNode.length;
//也可以将NodeList转为数组，在IE8及以前版本中无效
var arrayOfNodes = Array.prototype.slice.call(someNode.childNodes,0);
//兼容所有浏览器
function convertToArray(nodes){
 var array = null;
 try{
    array = Array.prototype.slice.call(nodes,0);//针对非IE浏览器
  }
 catch(ex){
    array = new Array();
    for(var i=0,len=nodes.length;i<len;i++){
    array.push(nodes[i]);
  }
 }
  return array;
}
//每个节点都有一个parentNode属性，该属性指向文档树种的父节点
if(someNode.nextSibling === null){
   console.log("Last node in the parent's childNodes list");
}else if(someNode.previousSibling === null){
 console.log("First node in the parent's childNodes list")
}
//父节点的firstChild和lastChild属性分别指向childeNodes中的第一和最后一个节点:som<span style="line-height: 1.5;">eNode.childNodes[0]等于someNode.firstChild;someNode.childNodes[someNode.childNodes.length-1]等于someNode.lastChild.</span>
//此外,hasChildeNodes()也是一个非常有用的方法,在节点包含一个或多个字节的情况下返回true。


      每个节点都拥有包含节点列表的两个属性：childNodes和children，他们间的不同之处在于
      childNodes包含所有子节点，而children仅包含类型为元素节点的子节点，而不包括文本类型的子节点



       3.操作节点
HTML 代码



1234567891011121314151617181920212223242526272829303132
//appendChild():用于向childNodes列表的末尾添加一个节点，返回新增的节点
var returnedNode = someNode.appendChild(newNode);
console.log(returnedNode == newNode);//true
console.log(someNode.lastChild == newNode);//true
//如果传入到appendChild()中的节点已经是文档的一部分了，那结果就是将该节点从原来的位置转移到新位置。
var returnedNode = someNode.appendChild(someNode.firstChild);
console.log(returnedNode == someNode.firstChild);//false
console.log(returnedNode == someNode.lastChild);//true
//如果需要把节点放在childNodes列表中某个特定的位置上，可以使用insertBefore()方法。这个方法接受两个参数:要插入的节点和作为参照的节点，插入节点后，被插入的节点会变成参照节点的前一个同胞节点(previousSibling)，同时被方法返回。如果参照节点时null,则insertBefore()与appendChild()执行相同的操作
//插入后成为最后一个子节点
returnedNode = someNode.insertBefore(newNode,null);
console.log(someNode.lastChild);//true
//插入后成为第一个字节点
var returnedNode = someNode.insertBefore(newNode,someNode.firstChild);
console.log(returnedNode ==new Node);//true
console.log(newNode == someNode.firstChild);//true
//插入到最后一个子节点前面
returnedNode = someNode.insertBefore(newNode,someNode.firstChild);;
console.log(newNode == someNode.childNodes[someNode.childNodes.length-2]);//true
//replaceChild():有两个参数，要插入的节点和要替换的节点。要替换的节点将由这个方法返回并从文档树中被移除，同时由要插入的节点占据其位置
//替换第一个子节点
var returnedNode = someNode.replaceChild(newNode,someNode.firstChild);
//替换最后一个子节点 
returnedNode = someNode.replaceChild(newNode,someNode.lastChild);
//removeChild():移除节点
var formerFirstChild = someNode.removeChild(someNode.firstChild);

二.Document类型     
    1.在浏览器中，document对象是HTMLDocument(继承自Document类型)的一个实例，表示整个HTML页面。而且，document对象是
       window对象的一个属性，因此可以将其作为全剧对象来访问。Document节点具有下列特征
HTML 代码



123456
nodeType的值为9;
nodeName的值为"#document";
nodeValue的值为null;
parentNode的值为null;
ownerDocument的值为null;
其子节点可能是一个DocumentType(最多一个),Element(最多一个)，ProcessingInstruction或Comment
     2.文档的子节点
HTML 代码



1234567891011121314
<html>
  <body>
  </body>
</html>
var html = document.documentElement;//取得对<html>的引用
console.log(html === document.childNodes[0]);//true
console.log(html === document.firstChild);//true
var body = document.body;//取得对<body>的引用
//Document 另一个可能的子节点是DocumentType。通常将<!DOCTYPE>标签看成一个与文档其他部分不同的实体，可以通过doctype属性来访问它的信息
var doctype = document.doctype;//取得对<!DOCTYPE>的引用

      3.文档信息
HTML 代码



123456789101112131415161718
//取得文档标题
var originalTitle = document.title;
//设置文档标题
document.title = 'New page title';
//取得完整的URL
var url = document.URL;
//取得域名
var domain = document.domain;
//取得来源页面的URL 
var referrer = document.referrer;
//也可以设置域名但是只能设置包含的域名
//比如域名为p2p.wrox.com
document.domain = "wrox.com";//成功
document.domain = "aaa.net";//出错
//并且如果域名一开始时松散的，则不能将它再设为紧绷的
document.domain = "wrox.com";//松散的(成功)
document.domain = "p2p.wrox.com";//紧绷的(出错)

三.DOM扩展     1.querySelector():接收一个CSS选择器，返回与该模式匹配的第一个元素，如果没有则返回null
HTML 代码



12345678
//取得body元素
var body = document.querySelector("body");
//取得ID为"myDiv"的元素
var myDiv = document.querySelector("#myDiv");
//取得类为"selected"的第一个元素
var selected = document.querySelector(".selected");
//取得类为"button"的第一个图像元素
var img = document.body.querySelector("img.button");
     
       2.querySelectorAll():接收的参数和querySelector一样，但是返回的是所有匹配的元素(NodeList的实例)
          与querySelector()类似，如果传入了浏览器不支持的选择符或者选择符中有语法错误，会抛出错误
HTML 代码



123456
//取得某<div>中的所有<em>元素(类似于getElementByTagName("em"))
var ems = document.getElementById("myDiv").querySelectorAll("em");
//取得类为"selected"的所有元素
var selecteds = document.querySelectorAll(".selected");
//取得所有<p>元素中的所有<strong>元素
var strongs = document.querySelectorAll("p strong");
      
       3.matchesSelector():传入一个参数，css选择符，如果调用元素与该选择符匹配，返回true;否则返回false
HTML 代码



123
if(document.body.matchesSelector("body.page1")){
    //true
}

       4.元素遍历:对于元素间的空格，IE9及之前版本不会返回文本节点，而其他所有浏览器都会返回文本节点。这样，
         就导致了在使用childNodes和firstChild等属性时的行为不一致，为了弥补这一差异，同时又保持DOM规范不变，
         添加了一下5个属性

HTML 代码



123456
childElementCount:返回子元素(不包括文本节点和注释)的个数;
firstElementChild:指向第一个字元素；firstChild的元素版;
lastElementChild:指向最后一个字元素；lastChild的元素版
previousElementSibling:指向前一个同辈元素；previousSibling的元素版；
nextElementSibling:指向后一个同辈元素；nextSibling的元素版
//支持的浏览器为DOM元素添加了这些属性，利用这些元素不必担心空白文本节点，从而可以更方便地查找DOM元素了


       5.与类相关的扩充
HTML 代码



123456789101112131415161718192021222324252627282930313233
//getElementsByClassName()方法
//所有类中包含username和current的元素，类名的先后顺序无所谓
var allCurrentUsernames = document.getElementsByClassName("username current");
//取得ID为"myDiv"的元素中带有类名"selected"的所有元素
var selected = document.getElementById("myDiv").getElementsByClassName("selected"); 
//html5新增了一种操作类名的方式:classList
add:将给定的字符串值添加到列表中，如果值存在就不添加.
contains:表示列表中是否存在给定的值，如果存在则返回true,否则返回false
remove:从列表中删除给定的字符串
toggle:如果列表中已经存在给定的值，删除它；如果列表中没有给定的值，添加它
<div class="bd user disabled"></div>
//删除disabled类
div.classList.remove("disabled");
//添加current类
div.classList.add("current");
//切换user类
div.classList.toggle("user");
//确定元素中是否包含类名
if(div.classList.contains("bd")){//..}
//焦点管理:html5也添加了辅助管理DOM焦点的功能
var button = document.getElementById("myButton");
button.focus();
console.log(document.activeElement  === button);//true
//默认情况下，文档刚加载完成时，document.activeElement中保存的是document.body元素的引用。文档加载期间,document.activeElement的值为null
var button = document.getElementById("myButton");
button.focus();
console.log(documet.hasFocus());//true

四.HTMLDocument的变化
    1.readyState属性:有两个可能的值(loading,正在加载文档；complete,已经加载完文档)
